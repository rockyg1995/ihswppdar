
MIDTERM_I.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00000c16  00000caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  008001b0  008001b0  00000d5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b81  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000493  00000000  00000000  0000241f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053b  00000000  00000000  000029c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000225  00000000  00000000  00002eff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e1       	ldi	r30, 0x16	; 22
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 3b       	cpi	r26, 0xB0	; 176
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 eb       	ldi	r26, 0xB0	; 176
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 3c       	cpi	r26, 0xC8	; 200
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 28 01 	call	0x250	; 0x250 <main>
  ea:	0c 94 09 06 	jmp	0xc12	; 0xc12 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <Timer1_init>:
}

unsigned char USART_receive(void) {				// Function to receive ASCII value from UDR0
	while (!(UCSR0A & (1 << RXC0)));			// Keep Checking until RXC0 is 'High' to break loop
	return UDR0;								// Return received serial into unsigned char data
}
  f2:	88 e0       	ldi	r24, 0x08	; 8
  f4:	9d e3       	ldi	r25, 0x3D	; 61
  f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fe:	e0 e8       	ldi	r30, 0x80	; 128
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
 104:	10 82       	st	Z, r1
 106:	10 82       	st	Z, r1
 108:	e1 e8       	ldi	r30, 0x81	; 129
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	88 e0       	ldi	r24, 0x08	; 8
 10e:	80 83       	st	Z, r24
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <__vector_11>:
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 124:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <USART_init>:
 132:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 136:	87 e0       	ldi	r24, 0x07	; 7
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 148:	08 95       	ret

0000014a <USART_send>:

void USART_send(unsigned char data) {			// Function to transmit ASCII value into UDR0
	while (!(UCSR0A & (1 << UDRE0)));			// Keep Checking until  UDRE0 data register 'High' to break loop
 14a:	e0 ec       	ldi	r30, 0xC0	; 192
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	95 ff       	sbrs	r25, 5
 152:	fd cf       	rjmp	.-6      	; 0x14e <USART_send+0x4>
	UDR0 = data;								// Store unsigned char serial data into UDR0
 154:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 158:	08 95       	ret

0000015a <USART_putstring>:
}

void USART_putstring(char* StringPtr) {			// Function to break string into chars, then USART_send()
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
	while (*StringPtr != 0x00) {				// Keep Looping until String Completed (null/0-bits)
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	31 f0       	breq	.+12     	; 0x172 <USART_putstring+0x18>
 166:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);					// Send the unsigned char value pointed by the string pointer
 168:	0e 94 a5 00 	call	0x14a	; 0x14a <USART_send>
	while (!(UCSR0A & (1 << UDRE0)));			// Keep Checking until  UDRE0 data register 'High' to break loop
	UDR0 = data;								// Store unsigned char serial data into UDR0
}

void USART_putstring(char* StringPtr) {			// Function to break string into chars, then USART_send()
	while (*StringPtr != 0x00) {				// Keep Looping until String Completed (null/0-bits)
 16c:	89 91       	ld	r24, Y+
 16e:	81 11       	cpse	r24, r1
 170:	fb cf       	rjmp	.-10     	; 0x168 <USART_putstring+0xe>
		USART_send(*StringPtr);					// Send the unsigned char value pointed by the string pointer
		StringPtr++;							// Increment pointer to next char array location
	}
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <adc_init>:
//-----------------------------------------------------------------------
void adc_init(void) {
	ADMUX = (0<<REFS1)|(1<<REFS0)|			// Reference Selection Bits, AVcc - External cap at AREF
 178:	85 e4       	ldi	r24, 0x45	; 69
 17a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(0<<ADLAR)|								// ADC Left Adjust Result
	(0<<MUX3)|(1<<MUX2)|(0<<MUX1)|(1<<MUX0);// Analog Channel Selection Bits 'ADC5' (PC5)
	
	ADCSRA = (1<<ADEN)|						// ADC Enable
 17e:	85 e8       	ldi	r24, 0x85	; 133
 180:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 184:	08 95       	ret

00000186 <read_adc>:
	(0<<ADIF)|								// ADC Interrupt Flag
	(0<<ADIE)|								// ADC Interrupt Enable
	(1<<ADPS2)|(0<<ADPS1)|(1<<ADPS0);		// ADC Prescaler Select Bits '32'
}

void read_adc(void) {
 186:	bf 92       	push	r11
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
	unsigned char i = 4;				// Set 'i' for iterations
	adc_temp = 0;						// set float 'adc_temp'
 198:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <adc_temp>
 19c:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <adc_temp+0x1>
 1a0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <adc_temp+0x2>
 1a4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <adc_temp+0x3>
 1a8:	68 94       	set
 1aa:	bb 24       	eor	r11, r11
 1ac:	b2 f8       	bld	r11, 2
	while (i--) {						// Decrement 'i' until 4 samples take
		ADCSRA |= (1<<ADSC);			// If ADSC is high (ADC Start Conversion)...
 1ae:	ca e7       	ldi	r28, 0x7A	; 122
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
		while (ADCSRA & (1<<ADSC));		// Start the ADC Conversion
		adc_temp += ADC;				// Store the analog value on of current adc_temp
 1b2:	08 e7       	ldi	r16, 0x78	; 120
 1b4:	10 e0       	ldi	r17, 0x00	; 0

void read_adc(void) {
	unsigned char i = 4;				// Set 'i' for iterations
	adc_temp = 0;						// set float 'adc_temp'
	while (i--) {						// Decrement 'i' until 4 samples take
		ADCSRA |= (1<<ADSC);			// If ADSC is high (ADC Start Conversion)...
 1b6:	88 81       	ld	r24, Y
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	88 83       	st	Y, r24
		while (ADCSRA & (1<<ADSC));		// Start the ADC Conversion
 1bc:	88 81       	ld	r24, Y
 1be:	86 fd       	sbrc	r24, 6
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <read_adc+0x36>
		adc_temp += ADC;				// Store the analog value on of current adc_temp
 1c2:	f8 01       	movw	r30, r16
 1c4:	60 81       	ld	r22, Z
 1c6:	71 81       	ldd	r23, Z+1	; 0x01
 1c8:	c0 90 c4 01 	lds	r12, 0x01C4	; 0x8001c4 <adc_temp>
 1cc:	d0 90 c5 01 	lds	r13, 0x01C5	; 0x8001c5 <adc_temp+0x1>
 1d0:	e0 90 c6 01 	lds	r14, 0x01C6	; 0x8001c6 <adc_temp+0x2>
 1d4:	f0 90 c7 01 	lds	r15, 0x01C7	; 0x8001c7 <adc_temp+0x3>
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 16 02 	call	0x42c	; 0x42c <__floatunsisf>
 1e0:	a7 01       	movw	r20, r14
 1e2:	96 01       	movw	r18, r12
 1e4:	0e 94 aa 01 	call	0x354	; 0x354 <__addsf3>
 1e8:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <adc_temp>
 1ec:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <adc_temp+0x1>
 1f0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <adc_temp+0x2>
 1f4:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <adc_temp+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	ff ef       	ldi	r31, 0xFF	; 255
 1fa:	20 e7       	ldi	r18, 0x70	; 112
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	f1 50       	subi	r31, 0x01	; 1
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <read_adc+0x78>
 206:	00 c0       	rjmp	.+0      	; 0x208 <read_adc+0x82>
 208:	00 00       	nop
 20a:	ba 94       	dec	r11
}

void read_adc(void) {
	unsigned char i = 4;				// Set 'i' for iterations
	adc_temp = 0;						// set float 'adc_temp'
	while (i--) {						// Decrement 'i' until 4 samples take
 20c:	b1 10       	cpse	r11, r1
 20e:	d3 cf       	rjmp	.-90     	; 0x1b6 <read_adc+0x30>
		ADCSRA |= (1<<ADSC);			// If ADSC is high (ADC Start Conversion)...
		while (ADCSRA & (1<<ADSC));		// Start the ADC Conversion
		adc_temp += ADC;				// Store the analog value on of current adc_temp
		_delay_ms(50);					// delay 50ms for sampling
	}
	adc_temp = (adc_temp/4);			// Average of 4 samples taken into adc_temp
 210:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <adc_temp>
 214:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <adc_temp+0x1>
 218:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <adc_temp+0x2>
 21c:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <adc_temp+0x3>
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	40 e8       	ldi	r20, 0x80	; 128
 226:	5e e3       	ldi	r21, 0x3E	; 62
 228:	0e 94 a4 02 	call	0x548	; 0x548 <__mulsf3>
 22c:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <adc_temp>
 230:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <adc_temp+0x1>
 234:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <adc_temp+0x2>
 238:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <adc_temp+0x3>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	08 95       	ret

00000250 <main>:
volatile float adc_temp;					// Stores ADC Value representing Temperature
char outs[20];								// 'outs[]' used to store integer and float values into array of chars size 20

int main(void) {
	
	DDRD = 0b00000010;					// Main Importance: PD0/RX Input, PD1/TX Output
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	8a b9       	out	0x0a, r24	; 10
	TIMSK1 |= (1 << OCIE1A);			// Set Interrupt on Compare Match
 254:	ef e6       	ldi	r30, 0x6F	; 111
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
	sei();								// Enable Global Interrupts
 25e:	78 94       	sei
	Timer1_init();						// Call the Timer1 initialization code
 260:	0e 94 79 00 	call	0xf2	; 0xf2 <Timer1_init>
	USART_init();						// Call the USART initialization code
 264:	0e 94 99 00 	call	0x132	; 0x132 <USART_init>
	adc_init();							// Call the ADC initialization code
 268:	0e 94 bc 00 	call	0x178	; 0x178 <adc_init>
	USART_putstring("Connected!\r\n");	// Pass 'Connected!' to function to send serial of chars
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>
 274:	2f e7       	ldi	r18, 0x7F	; 127
 276:	8a e1       	ldi	r24, 0x1A	; 26
 278:	96 e0       	ldi	r25, 0x06	; 6
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x2a>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x34>
 284:	00 00       	nop
	_delay_ms(125);						// Wait a bit
	float adc_tempf;					// to store ADC Fahrenheit Temperature

	USART_putstring("AT+CWJAP=\"Circuit Option 2\",\"NightW1sp!\"");
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>

	while (1) {												// Infinite loop
		if (TCNT1 == OCR1A) {								// Display a String when Timer1 Matches OCR1A
 28e:	04 e8       	ldi	r16, 0x84	; 132
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	c8 e8       	ldi	r28, 0x88	; 136
 294:	d0 e0       	ldi	r29, 0x00	; 0
			read_adc();										// Read value of ADC Temperature
			adc_tempf = (ADCH << 8) + ADCL;					// Let 'T(C) = Vout/10mV' and 'TOS = ADC - T(C)'
 296:	0f 2e       	mov	r0, r31
 298:	f9 e7       	ldi	r31, 0x79	; 121
 29a:	8f 2e       	mov	r8, r31
 29c:	91 2c       	mov	r9, r1
 29e:	f0 2d       	mov	r31, r0
 2a0:	0f 2e       	mov	r0, r31
 2a2:	f8 e7       	ldi	r31, 0x78	; 120
 2a4:	af 2e       	mov	r10, r31
 2a6:	b1 2c       	mov	r11, r1
 2a8:	f0 2d       	mov	r31, r0
			adc_tempf = (9/5)*adc_tempf + 32;				// Converts Celsius to Fahrenheit
			snprintf(outs,sizeof(outs),"%3f\r\n", adc_tempf);// Stores integer 'adc_temp' into the string 'outs'
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f6 e3       	ldi	r31, 0x36	; 54
 2ae:	cf 2e       	mov	r12, r31
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	df 2e       	mov	r13, r31
 2b4:	f0 2d       	mov	r31, r0
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f4 e1       	ldi	r31, 0x14	; 20
 2ba:	7f 2e       	mov	r7, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	0f 2e       	mov	r0, r31
 2c0:	f0 eb       	ldi	r31, 0xB0	; 176
 2c2:	ef 2e       	mov	r14, r31
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	ff 2e       	mov	r15, r31
 2c8:	f0 2d       	mov	r31, r0
	float adc_tempf;					// to store ADC Fahrenheit Temperature

	USART_putstring("AT+CWJAP=\"Circuit Option 2\",\"NightW1sp!\"");

	while (1) {												// Infinite loop
		if (TCNT1 == OCR1A) {								// Display a String when Timer1 Matches OCR1A
 2ca:	f8 01       	movw	r30, r16
 2cc:	20 81       	ld	r18, Z
 2ce:	31 81       	ldd	r19, Z+1	; 0x01
 2d0:	88 81       	ld	r24, Y
 2d2:	99 81       	ldd	r25, Y+1	; 0x01
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	c1 f7       	brne	.-16     	; 0x2ca <main+0x7a>
			read_adc();										// Read value of ADC Temperature
 2da:	0e 94 c3 00 	call	0x186	; 0x186 <read_adc>
			adc_tempf = (ADCH << 8) + ADCL;					// Let 'T(C) = Vout/10mV' and 'TOS = ADC - T(C)'
 2de:	f4 01       	movw	r30, r8
 2e0:	60 81       	ld	r22, Z
 2e2:	f5 01       	movw	r30, r10
 2e4:	80 81       	ld	r24, Z
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	76 2f       	mov	r23, r22
 2ea:	66 27       	eor	r22, r22
 2ec:	68 0f       	add	r22, r24
 2ee:	71 1d       	adc	r23, r1
 2f0:	07 2e       	mov	r0, r23
 2f2:	00 0c       	add	r0, r0
 2f4:	88 0b       	sbc	r24, r24
 2f6:	99 0b       	sbc	r25, r25
 2f8:	0e 94 18 02 	call	0x430	; 0x430 <__floatsisf>
			adc_tempf = (9/5)*adc_tempf + 32;				// Converts Celsius to Fahrenheit
			snprintf(outs,sizeof(outs),"%3f\r\n", adc_tempf);// Stores integer 'adc_temp' into the string 'outs'
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	52 e4       	ldi	r21, 0x42	; 66
 304:	0e 94 aa 01 	call	0x354	; 0x354 <__addsf3>
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	7f 93       	push	r23
 30e:	6f 93       	push	r22
 310:	df 92       	push	r13
 312:	cf 92       	push	r12
 314:	1f 92       	push	r1
 316:	7f 92       	push	r7
 318:	ff 92       	push	r15
 31a:	ef 92       	push	r14
 31c:	0e 94 11 03 	call	0x622	; 0x622 <snprintf>
			
			USART_putstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80");
 320:	8c e3       	ldi	r24, 0x3C	; 60
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>
			USART_putstring("AT+CIPSEND=51");
 328:	86 e6       	ldi	r24, 0x66	; 102
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>
			USART_putstring("GET /update?key=YR8DHQMB2YJS3AAX&field1=outs\r\n");
 330:	84 e7       	ldi	r24, 0x74	; 116
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>
			USART_putstring("AT+CIPCLOSE");
 338:	83 ea       	ldi	r24, 0xA3	; 163
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 ad 00 	call	0x15a	; 0x15a <USART_putstring>
 340:	8d b7       	in	r24, 0x3d	; 61
 342:	9e b7       	in	r25, 0x3e	; 62
 344:	0a 96       	adiw	r24, 0x0a	; 10
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	9e bf       	out	0x3e, r25	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	8d bf       	out	0x3d, r24	; 61
 350:	bc cf       	rjmp	.-136    	; 0x2ca <main+0x7a>

00000352 <__subsf3>:
 352:	50 58       	subi	r21, 0x80	; 128

00000354 <__addsf3>:
 354:	bb 27       	eor	r27, r27
 356:	aa 27       	eor	r26, r26
 358:	0e 94 c1 01 	call	0x382	; 0x382 <__addsf3x>
 35c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 360:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 364:	38 f0       	brcs	.+14     	; 0x374 <__addsf3+0x20>
 366:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 36a:	20 f0       	brcs	.+8      	; 0x374 <__addsf3+0x20>
 36c:	39 f4       	brne	.+14     	; 0x37c <__addsf3+0x28>
 36e:	9f 3f       	cpi	r25, 0xFF	; 255
 370:	19 f4       	brne	.+6      	; 0x378 <__addsf3+0x24>
 372:	26 f4       	brtc	.+8      	; 0x37c <__addsf3+0x28>
 374:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 378:	0e f4       	brtc	.+2      	; 0x37c <__addsf3+0x28>
 37a:	e0 95       	com	r30
 37c:	e7 fb       	bst	r30, 7
 37e:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>

00000382 <__addsf3x>:
 382:	e9 2f       	mov	r30, r25
 384:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 388:	58 f3       	brcs	.-42     	; 0x360 <__addsf3+0xc>
 38a:	ba 17       	cp	r27, r26
 38c:	62 07       	cpc	r22, r18
 38e:	73 07       	cpc	r23, r19
 390:	84 07       	cpc	r24, r20
 392:	95 07       	cpc	r25, r21
 394:	20 f0       	brcs	.+8      	; 0x39e <__addsf3x+0x1c>
 396:	79 f4       	brne	.+30     	; 0x3b6 <__addsf3x+0x34>
 398:	a6 f5       	brtc	.+104    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 39a:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__fp_zero>
 39e:	0e f4       	brtc	.+2      	; 0x3a2 <__addsf3x+0x20>
 3a0:	e0 95       	com	r30
 3a2:	0b 2e       	mov	r0, r27
 3a4:	ba 2f       	mov	r27, r26
 3a6:	a0 2d       	mov	r26, r0
 3a8:	0b 01       	movw	r0, r22
 3aa:	b9 01       	movw	r22, r18
 3ac:	90 01       	movw	r18, r0
 3ae:	0c 01       	movw	r0, r24
 3b0:	ca 01       	movw	r24, r20
 3b2:	a0 01       	movw	r20, r0
 3b4:	11 24       	eor	r1, r1
 3b6:	ff 27       	eor	r31, r31
 3b8:	59 1b       	sub	r21, r25
 3ba:	99 f0       	breq	.+38     	; 0x3e2 <__addsf3x+0x60>
 3bc:	59 3f       	cpi	r21, 0xF9	; 249
 3be:	50 f4       	brcc	.+20     	; 0x3d4 <__addsf3x+0x52>
 3c0:	50 3e       	cpi	r21, 0xE0	; 224
 3c2:	68 f1       	brcs	.+90     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3c4:	1a 16       	cp	r1, r26
 3c6:	f0 40       	sbci	r31, 0x00	; 0
 3c8:	a2 2f       	mov	r26, r18
 3ca:	23 2f       	mov	r18, r19
 3cc:	34 2f       	mov	r19, r20
 3ce:	44 27       	eor	r20, r20
 3d0:	58 5f       	subi	r21, 0xF8	; 248
 3d2:	f3 cf       	rjmp	.-26     	; 0x3ba <__addsf3x+0x38>
 3d4:	46 95       	lsr	r20
 3d6:	37 95       	ror	r19
 3d8:	27 95       	ror	r18
 3da:	a7 95       	ror	r26
 3dc:	f0 40       	sbci	r31, 0x00	; 0
 3de:	53 95       	inc	r21
 3e0:	c9 f7       	brne	.-14     	; 0x3d4 <__addsf3x+0x52>
 3e2:	7e f4       	brtc	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e4:	1f 16       	cp	r1, r31
 3e6:	ba 0b       	sbc	r27, r26
 3e8:	62 0b       	sbc	r22, r18
 3ea:	73 0b       	sbc	r23, r19
 3ec:	84 0b       	sbc	r24, r20
 3ee:	ba f0       	brmi	.+46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f0:	91 50       	subi	r25, 0x01	; 1
 3f2:	a1 f0       	breq	.+40     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3f4:	ff 0f       	add	r31, r31
 3f6:	bb 1f       	adc	r27, r27
 3f8:	66 1f       	adc	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	c2 f7       	brpl	.-16     	; 0x3f0 <__addsf3x+0x6e>
 400:	0e c0       	rjmp	.+28     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 402:	ba 0f       	add	r27, r26
 404:	62 1f       	adc	r22, r18
 406:	73 1f       	adc	r23, r19
 408:	84 1f       	adc	r24, r20
 40a:	48 f4       	brcc	.+18     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40c:	87 95       	ror	r24
 40e:	77 95       	ror	r23
 410:	67 95       	ror	r22
 412:	b7 95       	ror	r27
 414:	f7 95       	ror	r31
 416:	9e 3f       	cpi	r25, 0xFE	; 254
 418:	08 f0       	brcs	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	b0 cf       	rjmp	.-160    	; 0x37c <__addsf3+0x28>
 41c:	93 95       	inc	r25
 41e:	88 0f       	add	r24, r24
 420:	08 f0       	brcs	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	99 27       	eor	r25, r25
 424:	ee 0f       	add	r30, r30
 426:	97 95       	ror	r25
 428:	87 95       	ror	r24
 42a:	08 95       	ret

0000042c <__floatunsisf>:
 42c:	e8 94       	clt
 42e:	09 c0       	rjmp	.+18     	; 0x442 <__floatsisf+0x12>

00000430 <__floatsisf>:
 430:	97 fb       	bst	r25, 7
 432:	3e f4       	brtc	.+14     	; 0x442 <__floatsisf+0x12>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	99 23       	and	r25, r25
 444:	a9 f0       	breq	.+42     	; 0x470 <__floatsisf+0x40>
 446:	f9 2f       	mov	r31, r25
 448:	96 e9       	ldi	r25, 0x96	; 150
 44a:	bb 27       	eor	r27, r27
 44c:	93 95       	inc	r25
 44e:	f6 95       	lsr	r31
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f1 11       	cpse	r31, r1
 45a:	f8 cf       	rjmp	.-16     	; 0x44c <__floatsisf+0x1c>
 45c:	fa f4       	brpl	.+62     	; 0x49c <__floatsisf+0x6c>
 45e:	bb 0f       	add	r27, r27
 460:	11 f4       	brne	.+4      	; 0x466 <__floatsisf+0x36>
 462:	60 ff       	sbrs	r22, 0
 464:	1b c0       	rjmp	.+54     	; 0x49c <__floatsisf+0x6c>
 466:	6f 5f       	subi	r22, 0xFF	; 255
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	8f 4f       	sbci	r24, 0xFF	; 255
 46c:	9f 4f       	sbci	r25, 0xFF	; 255
 46e:	16 c0       	rjmp	.+44     	; 0x49c <__floatsisf+0x6c>
 470:	88 23       	and	r24, r24
 472:	11 f0       	breq	.+4      	; 0x478 <__floatsisf+0x48>
 474:	96 e9       	ldi	r25, 0x96	; 150
 476:	11 c0       	rjmp	.+34     	; 0x49a <__floatsisf+0x6a>
 478:	77 23       	and	r23, r23
 47a:	21 f0       	breq	.+8      	; 0x484 <__floatsisf+0x54>
 47c:	9e e8       	ldi	r25, 0x8E	; 142
 47e:	87 2f       	mov	r24, r23
 480:	76 2f       	mov	r23, r22
 482:	05 c0       	rjmp	.+10     	; 0x48e <__floatsisf+0x5e>
 484:	66 23       	and	r22, r22
 486:	71 f0       	breq	.+28     	; 0x4a4 <__floatsisf+0x74>
 488:	96 e8       	ldi	r25, 0x86	; 134
 48a:	86 2f       	mov	r24, r22
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	60 e0       	ldi	r22, 0x00	; 0
 490:	2a f0       	brmi	.+10     	; 0x49c <__floatsisf+0x6c>
 492:	9a 95       	dec	r25
 494:	66 0f       	add	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	da f7       	brpl	.-10     	; 0x492 <__floatsisf+0x62>
 49c:	88 0f       	add	r24, r24
 49e:	96 95       	lsr	r25
 4a0:	87 95       	ror	r24
 4a2:	97 f9       	bld	r25, 7
 4a4:	08 95       	ret

000004a6 <__fp_inf>:
 4a6:	97 f9       	bld	r25, 7
 4a8:	9f 67       	ori	r25, 0x7F	; 127
 4aa:	80 e8       	ldi	r24, 0x80	; 128
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	08 95       	ret

000004b2 <__fp_nan>:
 4b2:	9f ef       	ldi	r25, 0xFF	; 255
 4b4:	80 ec       	ldi	r24, 0xC0	; 192
 4b6:	08 95       	ret

000004b8 <__fp_pscA>:
 4b8:	00 24       	eor	r0, r0
 4ba:	0a 94       	dec	r0
 4bc:	16 16       	cp	r1, r22
 4be:	17 06       	cpc	r1, r23
 4c0:	18 06       	cpc	r1, r24
 4c2:	09 06       	cpc	r0, r25
 4c4:	08 95       	ret

000004c6 <__fp_pscB>:
 4c6:	00 24       	eor	r0, r0
 4c8:	0a 94       	dec	r0
 4ca:	12 16       	cp	r1, r18
 4cc:	13 06       	cpc	r1, r19
 4ce:	14 06       	cpc	r1, r20
 4d0:	05 06       	cpc	r0, r21
 4d2:	08 95       	ret

000004d4 <__fp_round>:
 4d4:	09 2e       	mov	r0, r25
 4d6:	03 94       	inc	r0
 4d8:	00 0c       	add	r0, r0
 4da:	11 f4       	brne	.+4      	; 0x4e0 <__fp_round+0xc>
 4dc:	88 23       	and	r24, r24
 4de:	52 f0       	brmi	.+20     	; 0x4f4 <__fp_round+0x20>
 4e0:	bb 0f       	add	r27, r27
 4e2:	40 f4       	brcc	.+16     	; 0x4f4 <__fp_round+0x20>
 4e4:	bf 2b       	or	r27, r31
 4e6:	11 f4       	brne	.+4      	; 0x4ec <__fp_round+0x18>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__fp_round+0x20>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	9f 4f       	sbci	r25, 0xFF	; 255
 4f4:	08 95       	ret

000004f6 <__fp_split3>:
 4f6:	57 fd       	sbrc	r21, 7
 4f8:	90 58       	subi	r25, 0x80	; 128
 4fa:	44 0f       	add	r20, r20
 4fc:	55 1f       	adc	r21, r21
 4fe:	59 f0       	breq	.+22     	; 0x516 <__fp_splitA+0x10>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	71 f0       	breq	.+28     	; 0x520 <__fp_splitA+0x1a>
 504:	47 95       	ror	r20

00000506 <__fp_splitA>:
 506:	88 0f       	add	r24, r24
 508:	97 fb       	bst	r25, 7
 50a:	99 1f       	adc	r25, r25
 50c:	61 f0       	breq	.+24     	; 0x526 <__fp_splitA+0x20>
 50e:	9f 3f       	cpi	r25, 0xFF	; 255
 510:	79 f0       	breq	.+30     	; 0x530 <__fp_splitA+0x2a>
 512:	87 95       	ror	r24
 514:	08 95       	ret
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	55 1f       	adc	r21, r21
 51e:	f2 cf       	rjmp	.-28     	; 0x504 <__fp_split3+0xe>
 520:	46 95       	lsr	r20
 522:	f1 df       	rcall	.-30     	; 0x506 <__fp_splitA>
 524:	08 c0       	rjmp	.+16     	; 0x536 <__fp_splitA+0x30>
 526:	16 16       	cp	r1, r22
 528:	17 06       	cpc	r1, r23
 52a:	18 06       	cpc	r1, r24
 52c:	99 1f       	adc	r25, r25
 52e:	f1 cf       	rjmp	.-30     	; 0x512 <__fp_splitA+0xc>
 530:	86 95       	lsr	r24
 532:	71 05       	cpc	r23, r1
 534:	61 05       	cpc	r22, r1
 536:	08 94       	sec
 538:	08 95       	ret

0000053a <__fp_zero>:
 53a:	e8 94       	clt

0000053c <__fp_szero>:
 53c:	bb 27       	eor	r27, r27
 53e:	66 27       	eor	r22, r22
 540:	77 27       	eor	r23, r23
 542:	cb 01       	movw	r24, r22
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__mulsf3>:
 548:	0e 94 b7 02 	call	0x56e	; 0x56e <__mulsf3x>
 54c:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <__fp_round>
 550:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_pscA>
 554:	38 f0       	brcs	.+14     	; 0x564 <__mulsf3+0x1c>
 556:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_pscB>
 55a:	20 f0       	brcs	.+8      	; 0x564 <__mulsf3+0x1c>
 55c:	95 23       	and	r25, r21
 55e:	11 f0       	breq	.+4      	; 0x564 <__mulsf3+0x1c>
 560:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 564:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__fp_nan>
 568:	11 24       	eor	r1, r1
 56a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>

0000056e <__mulsf3x>:
 56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_split3>
 572:	70 f3       	brcs	.-36     	; 0x550 <__mulsf3+0x8>

00000574 <__mulsf3_pse>:
 574:	95 9f       	mul	r25, r21
 576:	c1 f3       	breq	.-16     	; 0x568 <__mulsf3+0x20>
 578:	95 0f       	add	r25, r21
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	55 1f       	adc	r21, r21
 57e:	62 9f       	mul	r22, r18
 580:	f0 01       	movw	r30, r0
 582:	72 9f       	mul	r23, r18
 584:	bb 27       	eor	r27, r27
 586:	f0 0d       	add	r31, r0
 588:	b1 1d       	adc	r27, r1
 58a:	63 9f       	mul	r22, r19
 58c:	aa 27       	eor	r26, r26
 58e:	f0 0d       	add	r31, r0
 590:	b1 1d       	adc	r27, r1
 592:	aa 1f       	adc	r26, r26
 594:	64 9f       	mul	r22, r20
 596:	66 27       	eor	r22, r22
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	66 1f       	adc	r22, r22
 59e:	82 9f       	mul	r24, r18
 5a0:	22 27       	eor	r18, r18
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	62 1f       	adc	r22, r18
 5a8:	73 9f       	mul	r23, r19
 5aa:	b0 0d       	add	r27, r0
 5ac:	a1 1d       	adc	r26, r1
 5ae:	62 1f       	adc	r22, r18
 5b0:	83 9f       	mul	r24, r19
 5b2:	a0 0d       	add	r26, r0
 5b4:	61 1d       	adc	r22, r1
 5b6:	22 1f       	adc	r18, r18
 5b8:	74 9f       	mul	r23, r20
 5ba:	33 27       	eor	r19, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	23 1f       	adc	r18, r19
 5c2:	84 9f       	mul	r24, r20
 5c4:	60 0d       	add	r22, r0
 5c6:	21 1d       	adc	r18, r1
 5c8:	82 2f       	mov	r24, r18
 5ca:	76 2f       	mov	r23, r22
 5cc:	6a 2f       	mov	r22, r26
 5ce:	11 24       	eor	r1, r1
 5d0:	9f 57       	subi	r25, 0x7F	; 127
 5d2:	50 40       	sbci	r21, 0x00	; 0
 5d4:	9a f0       	brmi	.+38     	; 0x5fc <__mulsf3_pse+0x88>
 5d6:	f1 f0       	breq	.+60     	; 0x614 <__mulsf3_pse+0xa0>
 5d8:	88 23       	and	r24, r24
 5da:	4a f0       	brmi	.+18     	; 0x5ee <__mulsf3_pse+0x7a>
 5dc:	ee 0f       	add	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	a9 f7       	brne	.-22     	; 0x5d8 <__mulsf3_pse+0x64>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	80 f0       	brcs	.+32     	; 0x614 <__mulsf3_pse+0xa0>
 5f4:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__fp_inf>
 5f8:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_szero>
 5fc:	5f 3f       	cpi	r21, 0xFF	; 255
 5fe:	e4 f3       	brlt	.-8      	; 0x5f8 <__mulsf3_pse+0x84>
 600:	98 3e       	cpi	r25, 0xE8	; 232
 602:	d4 f3       	brlt	.-12     	; 0x5f8 <__mulsf3_pse+0x84>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b7 95       	ror	r27
 60c:	f7 95       	ror	r31
 60e:	e7 95       	ror	r30
 610:	9f 5f       	subi	r25, 0xFF	; 255
 612:	c1 f7       	brne	.-16     	; 0x604 <__mulsf3_pse+0x90>
 614:	fe 2b       	or	r31, r30
 616:	88 0f       	add	r24, r24
 618:	91 1d       	adc	r25, r1
 61a:	96 95       	lsr	r25
 61c:	87 95       	ror	r24
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <snprintf>:
 622:	ae e0       	ldi	r26, 0x0E	; 14
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	e7 e1       	ldi	r30, 0x17	; 23
 628:	f3 e0       	ldi	r31, 0x03	; 3
 62a:	0c 94 e0 05 	jmp	0xbc0	; 0xbc0 <__prologue_saves__+0x1c>
 62e:	0d 89       	ldd	r16, Y+21	; 0x15
 630:	1e 89       	ldd	r17, Y+22	; 0x16
 632:	8f 89       	ldd	r24, Y+23	; 0x17
 634:	98 8d       	ldd	r25, Y+24	; 0x18
 636:	26 e0       	ldi	r18, 0x06	; 6
 638:	2c 83       	std	Y+4, r18	; 0x04
 63a:	1a 83       	std	Y+2, r17	; 0x02
 63c:	09 83       	std	Y+1, r16	; 0x01
 63e:	97 ff       	sbrs	r25, 7
 640:	02 c0       	rjmp	.+4      	; 0x646 <snprintf+0x24>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	90 e8       	ldi	r25, 0x80	; 128
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	9e 83       	std	Y+6, r25	; 0x06
 64a:	8d 83       	std	Y+5, r24	; 0x05
 64c:	ae 01       	movw	r20, r28
 64e:	45 5e       	subi	r20, 0xE5	; 229
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	69 8d       	ldd	r22, Y+25	; 0x19
 654:	7a 8d       	ldd	r23, Y+26	; 0x1a
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	0e 94 41 03 	call	0x682	; 0x682 <vfprintf>
 65e:	4d 81       	ldd	r20, Y+5	; 0x05
 660:	5e 81       	ldd	r21, Y+6	; 0x06
 662:	57 fd       	sbrc	r21, 7
 664:	0a c0       	rjmp	.+20     	; 0x67a <snprintf+0x58>
 666:	2f 81       	ldd	r18, Y+7	; 0x07
 668:	38 85       	ldd	r19, Y+8	; 0x08
 66a:	42 17       	cp	r20, r18
 66c:	53 07       	cpc	r21, r19
 66e:	0c f4       	brge	.+2      	; 0x672 <snprintf+0x50>
 670:	9a 01       	movw	r18, r20
 672:	f8 01       	movw	r30, r16
 674:	e2 0f       	add	r30, r18
 676:	f3 1f       	adc	r31, r19
 678:	10 82       	st	Z, r1
 67a:	2e 96       	adiw	r28, 0x0e	; 14
 67c:	e4 e0       	ldi	r30, 0x04	; 4
 67e:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__epilogue_restores__+0x1c>

00000682 <vfprintf>:
 682:	ab e0       	ldi	r26, 0x0B	; 11
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e7 e4       	ldi	r30, 0x47	; 71
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__prologue_saves__>
 68e:	6c 01       	movw	r12, r24
 690:	7b 01       	movw	r14, r22
 692:	8a 01       	movw	r16, r20
 694:	fc 01       	movw	r30, r24
 696:	17 82       	std	Z+7, r1	; 0x07
 698:	16 82       	std	Z+6, r1	; 0x06
 69a:	83 81       	ldd	r24, Z+3	; 0x03
 69c:	81 ff       	sbrs	r24, 1
 69e:	cc c1       	rjmp	.+920    	; 0xa38 <__stack+0x139>
 6a0:	ce 01       	movw	r24, r28
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	3c 01       	movw	r6, r24
 6a6:	f6 01       	movw	r30, r12
 6a8:	93 81       	ldd	r25, Z+3	; 0x03
 6aa:	f7 01       	movw	r30, r14
 6ac:	93 fd       	sbrc	r25, 3
 6ae:	85 91       	lpm	r24, Z+
 6b0:	93 ff       	sbrs	r25, 3
 6b2:	81 91       	ld	r24, Z+
 6b4:	7f 01       	movw	r14, r30
 6b6:	88 23       	and	r24, r24
 6b8:	09 f4       	brne	.+2      	; 0x6bc <vfprintf+0x3a>
 6ba:	ba c1       	rjmp	.+884    	; 0xa30 <__stack+0x131>
 6bc:	85 32       	cpi	r24, 0x25	; 37
 6be:	39 f4       	brne	.+14     	; 0x6ce <vfprintf+0x4c>
 6c0:	93 fd       	sbrc	r25, 3
 6c2:	85 91       	lpm	r24, Z+
 6c4:	93 ff       	sbrs	r25, 3
 6c6:	81 91       	ld	r24, Z+
 6c8:	7f 01       	movw	r14, r30
 6ca:	85 32       	cpi	r24, 0x25	; 37
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <vfprintf+0x56>
 6ce:	b6 01       	movw	r22, r12
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 6d6:	e7 cf       	rjmp	.-50     	; 0x6a6 <vfprintf+0x24>
 6d8:	91 2c       	mov	r9, r1
 6da:	21 2c       	mov	r2, r1
 6dc:	31 2c       	mov	r3, r1
 6de:	ff e1       	ldi	r31, 0x1F	; 31
 6e0:	f3 15       	cp	r31, r3
 6e2:	d8 f0       	brcs	.+54     	; 0x71a <vfprintf+0x98>
 6e4:	8b 32       	cpi	r24, 0x2B	; 43
 6e6:	79 f0       	breq	.+30     	; 0x706 <vfprintf+0x84>
 6e8:	38 f4       	brcc	.+14     	; 0x6f8 <vfprintf+0x76>
 6ea:	80 32       	cpi	r24, 0x20	; 32
 6ec:	79 f0       	breq	.+30     	; 0x70c <vfprintf+0x8a>
 6ee:	83 32       	cpi	r24, 0x23	; 35
 6f0:	a1 f4       	brne	.+40     	; 0x71a <vfprintf+0x98>
 6f2:	23 2d       	mov	r18, r3
 6f4:	20 61       	ori	r18, 0x10	; 16
 6f6:	1d c0       	rjmp	.+58     	; 0x732 <vfprintf+0xb0>
 6f8:	8d 32       	cpi	r24, 0x2D	; 45
 6fa:	61 f0       	breq	.+24     	; 0x714 <vfprintf+0x92>
 6fc:	80 33       	cpi	r24, 0x30	; 48
 6fe:	69 f4       	brne	.+26     	; 0x71a <vfprintf+0x98>
 700:	23 2d       	mov	r18, r3
 702:	21 60       	ori	r18, 0x01	; 1
 704:	16 c0       	rjmp	.+44     	; 0x732 <vfprintf+0xb0>
 706:	83 2d       	mov	r24, r3
 708:	82 60       	ori	r24, 0x02	; 2
 70a:	38 2e       	mov	r3, r24
 70c:	e3 2d       	mov	r30, r3
 70e:	e4 60       	ori	r30, 0x04	; 4
 710:	3e 2e       	mov	r3, r30
 712:	2a c0       	rjmp	.+84     	; 0x768 <vfprintf+0xe6>
 714:	f3 2d       	mov	r31, r3
 716:	f8 60       	ori	r31, 0x08	; 8
 718:	1d c0       	rjmp	.+58     	; 0x754 <vfprintf+0xd2>
 71a:	37 fc       	sbrc	r3, 7
 71c:	2d c0       	rjmp	.+90     	; 0x778 <vfprintf+0xf6>
 71e:	20 ed       	ldi	r18, 0xD0	; 208
 720:	28 0f       	add	r18, r24
 722:	2a 30       	cpi	r18, 0x0A	; 10
 724:	40 f0       	brcs	.+16     	; 0x736 <vfprintf+0xb4>
 726:	8e 32       	cpi	r24, 0x2E	; 46
 728:	b9 f4       	brne	.+46     	; 0x758 <vfprintf+0xd6>
 72a:	36 fc       	sbrc	r3, 6
 72c:	81 c1       	rjmp	.+770    	; 0xa30 <__stack+0x131>
 72e:	23 2d       	mov	r18, r3
 730:	20 64       	ori	r18, 0x40	; 64
 732:	32 2e       	mov	r3, r18
 734:	19 c0       	rjmp	.+50     	; 0x768 <vfprintf+0xe6>
 736:	36 fe       	sbrs	r3, 6
 738:	06 c0       	rjmp	.+12     	; 0x746 <vfprintf+0xc4>
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	98 9e       	mul	r9, r24
 73e:	20 0d       	add	r18, r0
 740:	11 24       	eor	r1, r1
 742:	92 2e       	mov	r9, r18
 744:	11 c0       	rjmp	.+34     	; 0x768 <vfprintf+0xe6>
 746:	ea e0       	ldi	r30, 0x0A	; 10
 748:	2e 9e       	mul	r2, r30
 74a:	20 0d       	add	r18, r0
 74c:	11 24       	eor	r1, r1
 74e:	22 2e       	mov	r2, r18
 750:	f3 2d       	mov	r31, r3
 752:	f0 62       	ori	r31, 0x20	; 32
 754:	3f 2e       	mov	r3, r31
 756:	08 c0       	rjmp	.+16     	; 0x768 <vfprintf+0xe6>
 758:	8c 36       	cpi	r24, 0x6C	; 108
 75a:	21 f4       	brne	.+8      	; 0x764 <vfprintf+0xe2>
 75c:	83 2d       	mov	r24, r3
 75e:	80 68       	ori	r24, 0x80	; 128
 760:	38 2e       	mov	r3, r24
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0xe6>
 764:	88 36       	cpi	r24, 0x68	; 104
 766:	41 f4       	brne	.+16     	; 0x778 <vfprintf+0xf6>
 768:	f7 01       	movw	r30, r14
 76a:	93 fd       	sbrc	r25, 3
 76c:	85 91       	lpm	r24, Z+
 76e:	93 ff       	sbrs	r25, 3
 770:	81 91       	ld	r24, Z+
 772:	7f 01       	movw	r14, r30
 774:	81 11       	cpse	r24, r1
 776:	b3 cf       	rjmp	.-154    	; 0x6de <vfprintf+0x5c>
 778:	98 2f       	mov	r25, r24
 77a:	9f 7d       	andi	r25, 0xDF	; 223
 77c:	95 54       	subi	r25, 0x45	; 69
 77e:	93 30       	cpi	r25, 0x03	; 3
 780:	28 f4       	brcc	.+10     	; 0x78c <vfprintf+0x10a>
 782:	0c 5f       	subi	r16, 0xFC	; 252
 784:	1f 4f       	sbci	r17, 0xFF	; 255
 786:	9f e3       	ldi	r25, 0x3F	; 63
 788:	99 83       	std	Y+1, r25	; 0x01
 78a:	0d c0       	rjmp	.+26     	; 0x7a6 <vfprintf+0x124>
 78c:	83 36       	cpi	r24, 0x63	; 99
 78e:	31 f0       	breq	.+12     	; 0x79c <vfprintf+0x11a>
 790:	83 37       	cpi	r24, 0x73	; 115
 792:	71 f0       	breq	.+28     	; 0x7b0 <vfprintf+0x12e>
 794:	83 35       	cpi	r24, 0x53	; 83
 796:	09 f0       	breq	.+2      	; 0x79a <vfprintf+0x118>
 798:	59 c0       	rjmp	.+178    	; 0x84c <vfprintf+0x1ca>
 79a:	21 c0       	rjmp	.+66     	; 0x7de <vfprintf+0x15c>
 79c:	f8 01       	movw	r30, r16
 79e:	80 81       	ld	r24, Z
 7a0:	89 83       	std	Y+1, r24	; 0x01
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	88 24       	eor	r8, r8
 7a8:	83 94       	inc	r8
 7aa:	91 2c       	mov	r9, r1
 7ac:	53 01       	movw	r10, r6
 7ae:	13 c0       	rjmp	.+38     	; 0x7d6 <vfprintf+0x154>
 7b0:	28 01       	movw	r4, r16
 7b2:	f2 e0       	ldi	r31, 0x02	; 2
 7b4:	4f 0e       	add	r4, r31
 7b6:	51 1c       	adc	r5, r1
 7b8:	f8 01       	movw	r30, r16
 7ba:	a0 80       	ld	r10, Z
 7bc:	b1 80       	ldd	r11, Z+1	; 0x01
 7be:	36 fe       	sbrs	r3, 6
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <vfprintf+0x146>
 7c2:	69 2d       	mov	r22, r9
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <vfprintf+0x14a>
 7c8:	6f ef       	ldi	r22, 0xFF	; 255
 7ca:	7f ef       	ldi	r23, 0xFF	; 255
 7cc:	c5 01       	movw	r24, r10
 7ce:	0e 94 2d 05 	call	0xa5a	; 0xa5a <strnlen>
 7d2:	4c 01       	movw	r8, r24
 7d4:	82 01       	movw	r16, r4
 7d6:	f3 2d       	mov	r31, r3
 7d8:	ff 77       	andi	r31, 0x7F	; 127
 7da:	3f 2e       	mov	r3, r31
 7dc:	16 c0       	rjmp	.+44     	; 0x80a <vfprintf+0x188>
 7de:	28 01       	movw	r4, r16
 7e0:	22 e0       	ldi	r18, 0x02	; 2
 7e2:	42 0e       	add	r4, r18
 7e4:	51 1c       	adc	r5, r1
 7e6:	f8 01       	movw	r30, r16
 7e8:	a0 80       	ld	r10, Z
 7ea:	b1 80       	ldd	r11, Z+1	; 0x01
 7ec:	36 fe       	sbrs	r3, 6
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x174>
 7f0:	69 2d       	mov	r22, r9
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x178>
 7f6:	6f ef       	ldi	r22, 0xFF	; 255
 7f8:	7f ef       	ldi	r23, 0xFF	; 255
 7fa:	c5 01       	movw	r24, r10
 7fc:	0e 94 22 05 	call	0xa44	; 0xa44 <strnlen_P>
 800:	4c 01       	movw	r8, r24
 802:	f3 2d       	mov	r31, r3
 804:	f0 68       	ori	r31, 0x80	; 128
 806:	3f 2e       	mov	r3, r31
 808:	82 01       	movw	r16, r4
 80a:	33 fc       	sbrc	r3, 3
 80c:	1b c0       	rjmp	.+54     	; 0x844 <vfprintf+0x1c2>
 80e:	82 2d       	mov	r24, r2
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	88 16       	cp	r8, r24
 814:	99 06       	cpc	r9, r25
 816:	b0 f4       	brcc	.+44     	; 0x844 <vfprintf+0x1c2>
 818:	b6 01       	movw	r22, r12
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 822:	2a 94       	dec	r2
 824:	f4 cf       	rjmp	.-24     	; 0x80e <vfprintf+0x18c>
 826:	f5 01       	movw	r30, r10
 828:	37 fc       	sbrc	r3, 7
 82a:	85 91       	lpm	r24, Z+
 82c:	37 fe       	sbrs	r3, 7
 82e:	81 91       	ld	r24, Z+
 830:	5f 01       	movw	r10, r30
 832:	b6 01       	movw	r22, r12
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 83a:	21 10       	cpse	r2, r1
 83c:	2a 94       	dec	r2
 83e:	21 e0       	ldi	r18, 0x01	; 1
 840:	82 1a       	sub	r8, r18
 842:	91 08       	sbc	r9, r1
 844:	81 14       	cp	r8, r1
 846:	91 04       	cpc	r9, r1
 848:	71 f7       	brne	.-36     	; 0x826 <vfprintf+0x1a4>
 84a:	e8 c0       	rjmp	.+464    	; 0xa1c <__stack+0x11d>
 84c:	84 36       	cpi	r24, 0x64	; 100
 84e:	11 f0       	breq	.+4      	; 0x854 <vfprintf+0x1d2>
 850:	89 36       	cpi	r24, 0x69	; 105
 852:	41 f5       	brne	.+80     	; 0x8a4 <vfprintf+0x222>
 854:	f8 01       	movw	r30, r16
 856:	37 fe       	sbrs	r3, 7
 858:	07 c0       	rjmp	.+14     	; 0x868 <vfprintf+0x1e6>
 85a:	60 81       	ld	r22, Z
 85c:	71 81       	ldd	r23, Z+1	; 0x01
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	93 81       	ldd	r25, Z+3	; 0x03
 862:	0c 5f       	subi	r16, 0xFC	; 252
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	08 c0       	rjmp	.+16     	; 0x878 <vfprintf+0x1f6>
 868:	60 81       	ld	r22, Z
 86a:	71 81       	ldd	r23, Z+1	; 0x01
 86c:	07 2e       	mov	r0, r23
 86e:	00 0c       	add	r0, r0
 870:	88 0b       	sbc	r24, r24
 872:	99 0b       	sbc	r25, r25
 874:	0e 5f       	subi	r16, 0xFE	; 254
 876:	1f 4f       	sbci	r17, 0xFF	; 255
 878:	f3 2d       	mov	r31, r3
 87a:	ff 76       	andi	r31, 0x6F	; 111
 87c:	3f 2e       	mov	r3, r31
 87e:	97 ff       	sbrs	r25, 7
 880:	09 c0       	rjmp	.+18     	; 0x894 <vfprintf+0x212>
 882:	90 95       	com	r25
 884:	80 95       	com	r24
 886:	70 95       	com	r23
 888:	61 95       	neg	r22
 88a:	7f 4f       	sbci	r23, 0xFF	; 255
 88c:	8f 4f       	sbci	r24, 0xFF	; 255
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	f0 68       	ori	r31, 0x80	; 128
 892:	3f 2e       	mov	r3, r31
 894:	2a e0       	ldi	r18, 0x0A	; 10
 896:	30 e0       	ldi	r19, 0x00	; 0
 898:	a3 01       	movw	r20, r6
 89a:	0e 94 74 05 	call	0xae8	; 0xae8 <__ultoa_invert>
 89e:	88 2e       	mov	r8, r24
 8a0:	86 18       	sub	r8, r6
 8a2:	45 c0       	rjmp	.+138    	; 0x92e <__stack+0x2f>
 8a4:	85 37       	cpi	r24, 0x75	; 117
 8a6:	31 f4       	brne	.+12     	; 0x8b4 <vfprintf+0x232>
 8a8:	23 2d       	mov	r18, r3
 8aa:	2f 7e       	andi	r18, 0xEF	; 239
 8ac:	b2 2e       	mov	r11, r18
 8ae:	2a e0       	ldi	r18, 0x0A	; 10
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	25 c0       	rjmp	.+74     	; 0x8fe <vfprintf+0x27c>
 8b4:	93 2d       	mov	r25, r3
 8b6:	99 7f       	andi	r25, 0xF9	; 249
 8b8:	b9 2e       	mov	r11, r25
 8ba:	8f 36       	cpi	r24, 0x6F	; 111
 8bc:	c1 f0       	breq	.+48     	; 0x8ee <vfprintf+0x26c>
 8be:	18 f4       	brcc	.+6      	; 0x8c6 <vfprintf+0x244>
 8c0:	88 35       	cpi	r24, 0x58	; 88
 8c2:	79 f0       	breq	.+30     	; 0x8e2 <vfprintf+0x260>
 8c4:	b5 c0       	rjmp	.+362    	; 0xa30 <__stack+0x131>
 8c6:	80 37       	cpi	r24, 0x70	; 112
 8c8:	19 f0       	breq	.+6      	; 0x8d0 <vfprintf+0x24e>
 8ca:	88 37       	cpi	r24, 0x78	; 120
 8cc:	21 f0       	breq	.+8      	; 0x8d6 <vfprintf+0x254>
 8ce:	b0 c0       	rjmp	.+352    	; 0xa30 <__stack+0x131>
 8d0:	e9 2f       	mov	r30, r25
 8d2:	e0 61       	ori	r30, 0x10	; 16
 8d4:	be 2e       	mov	r11, r30
 8d6:	b4 fe       	sbrs	r11, 4
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <vfprintf+0x272>
 8da:	fb 2d       	mov	r31, r11
 8dc:	f4 60       	ori	r31, 0x04	; 4
 8de:	bf 2e       	mov	r11, r31
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x272>
 8e2:	34 fe       	sbrs	r3, 4
 8e4:	0a c0       	rjmp	.+20     	; 0x8fa <vfprintf+0x278>
 8e6:	29 2f       	mov	r18, r25
 8e8:	26 60       	ori	r18, 0x06	; 6
 8ea:	b2 2e       	mov	r11, r18
 8ec:	06 c0       	rjmp	.+12     	; 0x8fa <vfprintf+0x278>
 8ee:	28 e0       	ldi	r18, 0x08	; 8
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	05 c0       	rjmp	.+10     	; 0x8fe <vfprintf+0x27c>
 8f4:	20 e1       	ldi	r18, 0x10	; 16
 8f6:	30 e0       	ldi	r19, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x27c>
 8fa:	20 e1       	ldi	r18, 0x10	; 16
 8fc:	32 e0       	ldi	r19, 0x02	; 2
 8fe:	f8 01       	movw	r30, r16
 900:	b7 fe       	sbrs	r11, 7
 902:	07 c0       	rjmp	.+14     	; 0x912 <__stack+0x13>
 904:	60 81       	ld	r22, Z
 906:	71 81       	ldd	r23, Z+1	; 0x01
 908:	82 81       	ldd	r24, Z+2	; 0x02
 90a:	93 81       	ldd	r25, Z+3	; 0x03
 90c:	0c 5f       	subi	r16, 0xFC	; 252
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	06 c0       	rjmp	.+12     	; 0x91e <__stack+0x1f>
 912:	60 81       	ld	r22, Z
 914:	71 81       	ldd	r23, Z+1	; 0x01
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 5f       	subi	r16, 0xFE	; 254
 91c:	1f 4f       	sbci	r17, 0xFF	; 255
 91e:	a3 01       	movw	r20, r6
 920:	0e 94 74 05 	call	0xae8	; 0xae8 <__ultoa_invert>
 924:	88 2e       	mov	r8, r24
 926:	86 18       	sub	r8, r6
 928:	fb 2d       	mov	r31, r11
 92a:	ff 77       	andi	r31, 0x7F	; 127
 92c:	3f 2e       	mov	r3, r31
 92e:	36 fe       	sbrs	r3, 6
 930:	0d c0       	rjmp	.+26     	; 0x94c <__stack+0x4d>
 932:	23 2d       	mov	r18, r3
 934:	2e 7f       	andi	r18, 0xFE	; 254
 936:	a2 2e       	mov	r10, r18
 938:	89 14       	cp	r8, r9
 93a:	58 f4       	brcc	.+22     	; 0x952 <__stack+0x53>
 93c:	34 fe       	sbrs	r3, 4
 93e:	0b c0       	rjmp	.+22     	; 0x956 <__stack+0x57>
 940:	32 fc       	sbrc	r3, 2
 942:	09 c0       	rjmp	.+18     	; 0x956 <__stack+0x57>
 944:	83 2d       	mov	r24, r3
 946:	8e 7e       	andi	r24, 0xEE	; 238
 948:	a8 2e       	mov	r10, r24
 94a:	05 c0       	rjmp	.+10     	; 0x956 <__stack+0x57>
 94c:	b8 2c       	mov	r11, r8
 94e:	a3 2c       	mov	r10, r3
 950:	03 c0       	rjmp	.+6      	; 0x958 <__stack+0x59>
 952:	b8 2c       	mov	r11, r8
 954:	01 c0       	rjmp	.+2      	; 0x958 <__stack+0x59>
 956:	b9 2c       	mov	r11, r9
 958:	a4 fe       	sbrs	r10, 4
 95a:	0f c0       	rjmp	.+30     	; 0x97a <__stack+0x7b>
 95c:	fe 01       	movw	r30, r28
 95e:	e8 0d       	add	r30, r8
 960:	f1 1d       	adc	r31, r1
 962:	80 81       	ld	r24, Z
 964:	80 33       	cpi	r24, 0x30	; 48
 966:	21 f4       	brne	.+8      	; 0x970 <__stack+0x71>
 968:	9a 2d       	mov	r25, r10
 96a:	99 7e       	andi	r25, 0xE9	; 233
 96c:	a9 2e       	mov	r10, r25
 96e:	09 c0       	rjmp	.+18     	; 0x982 <__stack+0x83>
 970:	a2 fe       	sbrs	r10, 2
 972:	06 c0       	rjmp	.+12     	; 0x980 <__stack+0x81>
 974:	b3 94       	inc	r11
 976:	b3 94       	inc	r11
 978:	04 c0       	rjmp	.+8      	; 0x982 <__stack+0x83>
 97a:	8a 2d       	mov	r24, r10
 97c:	86 78       	andi	r24, 0x86	; 134
 97e:	09 f0       	breq	.+2      	; 0x982 <__stack+0x83>
 980:	b3 94       	inc	r11
 982:	a3 fc       	sbrc	r10, 3
 984:	11 c0       	rjmp	.+34     	; 0x9a8 <__stack+0xa9>
 986:	a0 fe       	sbrs	r10, 0
 988:	06 c0       	rjmp	.+12     	; 0x996 <__stack+0x97>
 98a:	b2 14       	cp	r11, r2
 98c:	88 f4       	brcc	.+34     	; 0x9b0 <__stack+0xb1>
 98e:	28 0c       	add	r2, r8
 990:	92 2c       	mov	r9, r2
 992:	9b 18       	sub	r9, r11
 994:	0e c0       	rjmp	.+28     	; 0x9b2 <__stack+0xb3>
 996:	b2 14       	cp	r11, r2
 998:	60 f4       	brcc	.+24     	; 0x9b2 <__stack+0xb3>
 99a:	b6 01       	movw	r22, r12
 99c:	80 e2       	ldi	r24, 0x20	; 32
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9a4:	b3 94       	inc	r11
 9a6:	f7 cf       	rjmp	.-18     	; 0x996 <__stack+0x97>
 9a8:	b2 14       	cp	r11, r2
 9aa:	18 f4       	brcc	.+6      	; 0x9b2 <__stack+0xb3>
 9ac:	2b 18       	sub	r2, r11
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	98 2c       	mov	r9, r8
 9b2:	21 2c       	mov	r2, r1
 9b4:	a4 fe       	sbrs	r10, 4
 9b6:	10 c0       	rjmp	.+32     	; 0x9d8 <__stack+0xd9>
 9b8:	b6 01       	movw	r22, r12
 9ba:	80 e3       	ldi	r24, 0x30	; 48
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9c2:	a2 fe       	sbrs	r10, 2
 9c4:	17 c0       	rjmp	.+46     	; 0x9f4 <__stack+0xf5>
 9c6:	a1 fc       	sbrc	r10, 1
 9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
 9ca:	88 e7       	ldi	r24, 0x78	; 120
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <__stack+0xd5>
 9d0:	88 e5       	ldi	r24, 0x58	; 88
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b6 01       	movw	r22, r12
 9d6:	0c c0       	rjmp	.+24     	; 0x9f0 <__stack+0xf1>
 9d8:	8a 2d       	mov	r24, r10
 9da:	86 78       	andi	r24, 0x86	; 134
 9dc:	59 f0       	breq	.+22     	; 0x9f4 <__stack+0xf5>
 9de:	a1 fe       	sbrs	r10, 1
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <__stack+0xe7>
 9e2:	8b e2       	ldi	r24, 0x2B	; 43
 9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__stack+0xe9>
 9e6:	80 e2       	ldi	r24, 0x20	; 32
 9e8:	a7 fc       	sbrc	r10, 7
 9ea:	8d e2       	ldi	r24, 0x2D	; 45
 9ec:	b6 01       	movw	r22, r12
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 9f4:	89 14       	cp	r8, r9
 9f6:	38 f4       	brcc	.+14     	; 0xa06 <__stack+0x107>
 9f8:	b6 01       	movw	r22, r12
 9fa:	80 e3       	ldi	r24, 0x30	; 48
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 a02:	9a 94       	dec	r9
 a04:	f7 cf       	rjmp	.-18     	; 0x9f4 <__stack+0xf5>
 a06:	8a 94       	dec	r8
 a08:	f3 01       	movw	r30, r6
 a0a:	e8 0d       	add	r30, r8
 a0c:	f1 1d       	adc	r31, r1
 a0e:	80 81       	ld	r24, Z
 a10:	b6 01       	movw	r22, r12
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 a18:	81 10       	cpse	r8, r1
 a1a:	f5 cf       	rjmp	.-22     	; 0xa06 <__stack+0x107>
 a1c:	22 20       	and	r2, r2
 a1e:	09 f4       	brne	.+2      	; 0xa22 <__stack+0x123>
 a20:	42 ce       	rjmp	.-892    	; 0x6a6 <vfprintf+0x24>
 a22:	b6 01       	movw	r22, r12
 a24:	80 e2       	ldi	r24, 0x20	; 32
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	0e 94 38 05 	call	0xa70	; 0xa70 <fputc>
 a2c:	2a 94       	dec	r2
 a2e:	f6 cf       	rjmp	.-20     	; 0xa1c <__stack+0x11d>
 a30:	f6 01       	movw	r30, r12
 a32:	86 81       	ldd	r24, Z+6	; 0x06
 a34:	97 81       	ldd	r25, Z+7	; 0x07
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <__stack+0x13d>
 a38:	8f ef       	ldi	r24, 0xFF	; 255
 a3a:	9f ef       	ldi	r25, 0xFF	; 255
 a3c:	2b 96       	adiw	r28, 0x0b	; 11
 a3e:	e2 e1       	ldi	r30, 0x12	; 18
 a40:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__epilogue_restores__>

00000a44 <strnlen_P>:
 a44:	fc 01       	movw	r30, r24
 a46:	05 90       	lpm	r0, Z+
 a48:	61 50       	subi	r22, 0x01	; 1
 a4a:	70 40       	sbci	r23, 0x00	; 0
 a4c:	01 10       	cpse	r0, r1
 a4e:	d8 f7       	brcc	.-10     	; 0xa46 <strnlen_P+0x2>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	8e 0f       	add	r24, r30
 a56:	9f 1f       	adc	r25, r31
 a58:	08 95       	ret

00000a5a <strnlen>:
 a5a:	fc 01       	movw	r30, r24
 a5c:	61 50       	subi	r22, 0x01	; 1
 a5e:	70 40       	sbci	r23, 0x00	; 0
 a60:	01 90       	ld	r0, Z+
 a62:	01 10       	cpse	r0, r1
 a64:	d8 f7       	brcc	.-10     	; 0xa5c <strnlen+0x2>
 a66:	80 95       	com	r24
 a68:	90 95       	com	r25
 a6a:	8e 0f       	add	r24, r30
 a6c:	9f 1f       	adc	r25, r31
 a6e:	08 95       	ret

00000a70 <fputc>:
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	fb 01       	movw	r30, r22
 a7a:	23 81       	ldd	r18, Z+3	; 0x03
 a7c:	21 fd       	sbrc	r18, 1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <fputc+0x16>
 a80:	8f ef       	ldi	r24, 0xFF	; 255
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	2c c0       	rjmp	.+88     	; 0xade <fputc+0x6e>
 a86:	22 ff       	sbrs	r18, 2
 a88:	16 c0       	rjmp	.+44     	; 0xab6 <fputc+0x46>
 a8a:	46 81       	ldd	r20, Z+6	; 0x06
 a8c:	57 81       	ldd	r21, Z+7	; 0x07
 a8e:	24 81       	ldd	r18, Z+4	; 0x04
 a90:	35 81       	ldd	r19, Z+5	; 0x05
 a92:	42 17       	cp	r20, r18
 a94:	53 07       	cpc	r21, r19
 a96:	44 f4       	brge	.+16     	; 0xaa8 <fputc+0x38>
 a98:	a0 81       	ld	r26, Z
 a9a:	b1 81       	ldd	r27, Z+1	; 0x01
 a9c:	9d 01       	movw	r18, r26
 a9e:	2f 5f       	subi	r18, 0xFF	; 255
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	31 83       	std	Z+1, r19	; 0x01
 aa4:	20 83       	st	Z, r18
 aa6:	8c 93       	st	X, r24
 aa8:	26 81       	ldd	r18, Z+6	; 0x06
 aaa:	37 81       	ldd	r19, Z+7	; 0x07
 aac:	2f 5f       	subi	r18, 0xFF	; 255
 aae:	3f 4f       	sbci	r19, 0xFF	; 255
 ab0:	37 83       	std	Z+7, r19	; 0x07
 ab2:	26 83       	std	Z+6, r18	; 0x06
 ab4:	14 c0       	rjmp	.+40     	; 0xade <fputc+0x6e>
 ab6:	8b 01       	movw	r16, r22
 ab8:	ec 01       	movw	r28, r24
 aba:	fb 01       	movw	r30, r22
 abc:	00 84       	ldd	r0, Z+8	; 0x08
 abe:	f1 85       	ldd	r31, Z+9	; 0x09
 ac0:	e0 2d       	mov	r30, r0
 ac2:	09 95       	icall
 ac4:	89 2b       	or	r24, r25
 ac6:	e1 f6       	brne	.-72     	; 0xa80 <fputc+0x10>
 ac8:	d8 01       	movw	r26, r16
 aca:	16 96       	adiw	r26, 0x06	; 6
 acc:	8d 91       	ld	r24, X+
 ace:	9c 91       	ld	r25, X
 ad0:	17 97       	sbiw	r26, 0x07	; 7
 ad2:	01 96       	adiw	r24, 0x01	; 1
 ad4:	17 96       	adiw	r26, 0x07	; 7
 ad6:	9c 93       	st	X, r25
 ad8:	8e 93       	st	-X, r24
 ada:	16 97       	sbiw	r26, 0x06	; 6
 adc:	ce 01       	movw	r24, r28
 ade:	df 91       	pop	r29
 ae0:	cf 91       	pop	r28
 ae2:	1f 91       	pop	r17
 ae4:	0f 91       	pop	r16
 ae6:	08 95       	ret

00000ae8 <__ultoa_invert>:
 ae8:	fa 01       	movw	r30, r20
 aea:	aa 27       	eor	r26, r26
 aec:	28 30       	cpi	r18, 0x08	; 8
 aee:	51 f1       	breq	.+84     	; 0xb44 <__ultoa_invert+0x5c>
 af0:	20 31       	cpi	r18, 0x10	; 16
 af2:	81 f1       	breq	.+96     	; 0xb54 <__ultoa_invert+0x6c>
 af4:	e8 94       	clt
 af6:	6f 93       	push	r22
 af8:	6e 7f       	andi	r22, 0xFE	; 254
 afa:	6e 5f       	subi	r22, 0xFE	; 254
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	af 4f       	sbci	r26, 0xFF	; 255
 b04:	b1 e0       	ldi	r27, 0x01	; 1
 b06:	3e d0       	rcall	.+124    	; 0xb84 <__ultoa_invert+0x9c>
 b08:	b4 e0       	ldi	r27, 0x04	; 4
 b0a:	3c d0       	rcall	.+120    	; 0xb84 <__ultoa_invert+0x9c>
 b0c:	67 0f       	add	r22, r23
 b0e:	78 1f       	adc	r23, r24
 b10:	89 1f       	adc	r24, r25
 b12:	9a 1f       	adc	r25, r26
 b14:	a1 1d       	adc	r26, r1
 b16:	68 0f       	add	r22, r24
 b18:	79 1f       	adc	r23, r25
 b1a:	8a 1f       	adc	r24, r26
 b1c:	91 1d       	adc	r25, r1
 b1e:	a1 1d       	adc	r26, r1
 b20:	6a 0f       	add	r22, r26
 b22:	71 1d       	adc	r23, r1
 b24:	81 1d       	adc	r24, r1
 b26:	91 1d       	adc	r25, r1
 b28:	a1 1d       	adc	r26, r1
 b2a:	20 d0       	rcall	.+64     	; 0xb6c <__ultoa_invert+0x84>
 b2c:	09 f4       	brne	.+2      	; 0xb30 <__ultoa_invert+0x48>
 b2e:	68 94       	set
 b30:	3f 91       	pop	r19
 b32:	2a e0       	ldi	r18, 0x0A	; 10
 b34:	26 9f       	mul	r18, r22
 b36:	11 24       	eor	r1, r1
 b38:	30 19       	sub	r19, r0
 b3a:	30 5d       	subi	r19, 0xD0	; 208
 b3c:	31 93       	st	Z+, r19
 b3e:	de f6       	brtc	.-74     	; 0xaf6 <__ultoa_invert+0xe>
 b40:	cf 01       	movw	r24, r30
 b42:	08 95       	ret
 b44:	46 2f       	mov	r20, r22
 b46:	47 70       	andi	r20, 0x07	; 7
 b48:	40 5d       	subi	r20, 0xD0	; 208
 b4a:	41 93       	st	Z+, r20
 b4c:	b3 e0       	ldi	r27, 0x03	; 3
 b4e:	0f d0       	rcall	.+30     	; 0xb6e <__ultoa_invert+0x86>
 b50:	c9 f7       	brne	.-14     	; 0xb44 <__ultoa_invert+0x5c>
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <__ultoa_invert+0x58>
 b54:	46 2f       	mov	r20, r22
 b56:	4f 70       	andi	r20, 0x0F	; 15
 b58:	40 5d       	subi	r20, 0xD0	; 208
 b5a:	4a 33       	cpi	r20, 0x3A	; 58
 b5c:	18 f0       	brcs	.+6      	; 0xb64 <__ultoa_invert+0x7c>
 b5e:	49 5d       	subi	r20, 0xD9	; 217
 b60:	31 fd       	sbrc	r19, 1
 b62:	40 52       	subi	r20, 0x20	; 32
 b64:	41 93       	st	Z+, r20
 b66:	02 d0       	rcall	.+4      	; 0xb6c <__ultoa_invert+0x84>
 b68:	a9 f7       	brne	.-22     	; 0xb54 <__ultoa_invert+0x6c>
 b6a:	ea cf       	rjmp	.-44     	; 0xb40 <__ultoa_invert+0x58>
 b6c:	b4 e0       	ldi	r27, 0x04	; 4
 b6e:	a6 95       	lsr	r26
 b70:	97 95       	ror	r25
 b72:	87 95       	ror	r24
 b74:	77 95       	ror	r23
 b76:	67 95       	ror	r22
 b78:	ba 95       	dec	r27
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__ultoa_invert+0x86>
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	61 05       	cpc	r22, r1
 b80:	71 05       	cpc	r23, r1
 b82:	08 95       	ret
 b84:	9b 01       	movw	r18, r22
 b86:	ac 01       	movw	r20, r24
 b88:	0a 2e       	mov	r0, r26
 b8a:	06 94       	lsr	r0
 b8c:	57 95       	ror	r21
 b8e:	47 95       	ror	r20
 b90:	37 95       	ror	r19
 b92:	27 95       	ror	r18
 b94:	ba 95       	dec	r27
 b96:	c9 f7       	brne	.-14     	; 0xb8a <__ultoa_invert+0xa2>
 b98:	62 0f       	add	r22, r18
 b9a:	73 1f       	adc	r23, r19
 b9c:	84 1f       	adc	r24, r20
 b9e:	95 1f       	adc	r25, r21
 ba0:	a0 1d       	adc	r26, r0
 ba2:	08 95       	ret

00000ba4 <__prologue_saves__>:
 ba4:	2f 92       	push	r2
 ba6:	3f 92       	push	r3
 ba8:	4f 92       	push	r4
 baa:	5f 92       	push	r5
 bac:	6f 92       	push	r6
 bae:	7f 92       	push	r7
 bb0:	8f 92       	push	r8
 bb2:	9f 92       	push	r9
 bb4:	af 92       	push	r10
 bb6:	bf 92       	push	r11
 bb8:	cf 92       	push	r12
 bba:	df 92       	push	r13
 bbc:	ef 92       	push	r14
 bbe:	ff 92       	push	r15
 bc0:	0f 93       	push	r16
 bc2:	1f 93       	push	r17
 bc4:	cf 93       	push	r28
 bc6:	df 93       	push	r29
 bc8:	cd b7       	in	r28, 0x3d	; 61
 bca:	de b7       	in	r29, 0x3e	; 62
 bcc:	ca 1b       	sub	r28, r26
 bce:	db 0b       	sbc	r29, r27
 bd0:	0f b6       	in	r0, 0x3f	; 63
 bd2:	f8 94       	cli
 bd4:	de bf       	out	0x3e, r29	; 62
 bd6:	0f be       	out	0x3f, r0	; 63
 bd8:	cd bf       	out	0x3d, r28	; 61
 bda:	09 94       	ijmp

00000bdc <__epilogue_restores__>:
 bdc:	2a 88       	ldd	r2, Y+18	; 0x12
 bde:	39 88       	ldd	r3, Y+17	; 0x11
 be0:	48 88       	ldd	r4, Y+16	; 0x10
 be2:	5f 84       	ldd	r5, Y+15	; 0x0f
 be4:	6e 84       	ldd	r6, Y+14	; 0x0e
 be6:	7d 84       	ldd	r7, Y+13	; 0x0d
 be8:	8c 84       	ldd	r8, Y+12	; 0x0c
 bea:	9b 84       	ldd	r9, Y+11	; 0x0b
 bec:	aa 84       	ldd	r10, Y+10	; 0x0a
 bee:	b9 84       	ldd	r11, Y+9	; 0x09
 bf0:	c8 84       	ldd	r12, Y+8	; 0x08
 bf2:	df 80       	ldd	r13, Y+7	; 0x07
 bf4:	ee 80       	ldd	r14, Y+6	; 0x06
 bf6:	fd 80       	ldd	r15, Y+5	; 0x05
 bf8:	0c 81       	ldd	r16, Y+4	; 0x04
 bfa:	1b 81       	ldd	r17, Y+3	; 0x03
 bfc:	aa 81       	ldd	r26, Y+2	; 0x02
 bfe:	b9 81       	ldd	r27, Y+1	; 0x01
 c00:	ce 0f       	add	r28, r30
 c02:	d1 1d       	adc	r29, r1
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	f8 94       	cli
 c08:	de bf       	out	0x3e, r29	; 62
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	cd bf       	out	0x3d, r28	; 61
 c0e:	ed 01       	movw	r28, r26
 c10:	08 95       	ret

00000c12 <_exit>:
 c12:	f8 94       	cli

00000c14 <__stop_program>:
 c14:	ff cf       	rjmp	.-2      	; 0xc14 <__stop_program>
