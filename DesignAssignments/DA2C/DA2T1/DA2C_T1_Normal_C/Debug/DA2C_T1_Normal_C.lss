
DA2C_T1_Normal_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b1  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f1  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b2  00000000  00000000  0000148e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00001764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
	unsigned char p_leftover = period%256;		// Remainder of Period divided by Counter Size
	unsigned char dc_end = duty_cycle/256;		// Quotient of Duty Cycle divided by Counter Size
	unsigned char dc_leftover = duty_cycle%256;	// Remainder of Duty Cycle divided by Counter Size
	unsigned char i = 0;						// 8-bit Positive Counter 'i'
	
	DDRB = LED;											// Set direction of LED (PB2) as an Output
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	84 b9       	out	0x04, r24	; 4
	TCCR0A = (0<<WGM01)|(0<<WGM00);						// Set WGM to Normal
  d0:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to Normal (Cont.), Prescaler '1024'
  d2:	85 e0       	ldi	r24, 0x05	; 5
  d4:	85 bd       	out	0x25, r24	; 37
				while(TCNT0 < dc_leftover);	// Finish Duty Cycle Remainder
				PORTB = 0x00;				// Then set Output LED PB2 to 'LOW'
			}
			while((TIFR0 & 0x01) == 0);		// Otherwise, Check if Timer0 Overflow Set
			TCNT0 = 0x00;					// If Overflow set, Restart Timer0
			TIFR0 = 0x01;					// And Reset Overflow Flag
  d6:	91 e0       	ldi	r25, 0x01	; 1
	DDRB = LED;											// Set direction of LED (PB2) as an Output
	TCCR0A = (0<<WGM01)|(0<<WGM00);						// Set WGM to Normal
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to Normal (Cont.), Prescaler '1024'
	
	while (1) {
		PORTB |= LED;						// Set Output LED PB2 to 'HIGH'
  d8:	2a 9a       	sbi	0x05, 2	; 5
		i = 0;								// Initialize Counter 'i' to zero
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	06 c0       	rjmp	.+12     	; 0xea <main+0x1e>
		while (i < p_end) {					// Loop Counter 'i' until Period Quotient is met
			if (i == dc_end) {				// If Counter 'i' is at end of Duty Cycle Quotient...
  de:	8a 31       	cpi	r24, 0x1A	; 26
  e0:	21 f4       	brne	.+8      	; 0xea <main+0x1e>
				while(TCNT0 < dc_leftover);	// Finish Duty Cycle Remainder
  e2:	26 b5       	in	r18, 0x26	; 38
  e4:	2c 38       	cpi	r18, 0x8C	; 140
  e6:	e8 f3       	brcs	.-6      	; 0xe2 <main+0x16>
				PORTB = 0x00;				// Then set Output LED PB2 to 'LOW'
  e8:	15 b8       	out	0x05, r1	; 5
			}
			while((TIFR0 & 0x01) == 0);		// Otherwise, Check if Timer0 Overflow Set
  ea:	a8 9b       	sbis	0x15, 0	; 21
  ec:	fe cf       	rjmp	.-4      	; 0xea <main+0x1e>
			TCNT0 = 0x00;					// If Overflow set, Restart Timer0
  ee:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0x01;					// And Reset Overflow Flag
  f0:	95 bb       	out	0x15, r25	; 21
			i++;							// Increment Counter 'i'
  f2:	8f 5f       	subi	r24, 0xFF	; 255
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to Normal (Cont.), Prescaler '1024'
	
	while (1) {
		PORTB |= LED;						// Set Output LED PB2 to 'HIGH'
		i = 0;								// Initialize Counter 'i' to zero
		while (i < p_end) {					// Loop Counter 'i' until Period Quotient is met
  f4:	8c 32       	cpi	r24, 0x2C	; 44
  f6:	99 f7       	brne	.-26     	; 0xde <main+0x12>
			while((TIFR0 & 0x01) == 0);		// Otherwise, Check if Timer0 Overflow Set
			TCNT0 = 0x00;					// If Overflow set, Restart Timer0
			TIFR0 = 0x01;					// And Reset Overflow Flag
			i++;							// Increment Counter 'i'
		}
		while (TCNT0 < p_leftover);			// If Counter 'i' at end of period, then finish remainder
  f8:	86 b5       	in	r24, 0x26	; 38
  fa:	8f 33       	cpi	r24, 0x3F	; 63
  fc:	e8 f3       	brcs	.-6      	; 0xf8 <main+0x2c>
		TCNT0 = 0x00;						// Restart Period and Timer0 from beginning
  fe:	16 bc       	out	0x26, r1	; 38
	}
 100:	eb cf       	rjmp	.-42     	; 0xd8 <main+0xc>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
