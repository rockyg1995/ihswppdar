
DA2C_T1_CTC_IRO_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009d3  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000914  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ca  00000000  00000000  0000153f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  0000180c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_14>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
	unsigned char p_end = period/256;			// Quotient of Period divided by Counter Size
	unsigned char p_leftover = period%256;		// Remainder of Period divided by Counter Size
	unsigned char dc_end = duty_cycle/256;		// Quotient of Duty Cycle divided by Counter Size
	unsigned char dc_leftover = duty_cycle%256;	// Remainder of Duty Cycle divided by Counter Size
	
	DDRB = LED;											// Set direction of LED (PB2) as an Output
  dc:	84 e0       	ldi	r24, 0x04	; 4
  de:	84 b9       	out	0x04, r24	; 4
	OCR0A = 0xFF;										// Load Compare Register Value
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);							// Set Interrupt on Compare Match
  e4:	ee e6       	ldi	r30, 0x6E	; 110
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	80 83       	st	Z, r24
	sei();												// Enable Global Interrupts
  ee:	78 94       	sei
	TCCR0A = (0<<COM0A1)|(0<<COM0A0);					// Set Compare Output Mode
  f0:	14 bc       	out	0x24, r1	; 36
	TCCR0A = (1<<WGM01)|(0<<WGM00);						// Set WGM to CTC
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to CTC (Cont.), Prescaler '1024'
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	85 bd       	out	0x25, r24	; 37
	
	while (1) {
		PORTB |= LED;						// Set Output LED PB2 to 'HIGH'
  fa:	2a 9a       	sbi	0x05, 2	; 5
		i = 0;								// Initialize Counter 'i' to zero
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		while (i < p_end) {					// Loop Counter 'i' until Period Quotient is met
 100:	08 c0       	rjmp	.+16     	; 0x112 <main+0x36>
			if (i == dc_end) {				// If Counter 'i' is at end of Duty Cycle Quotient...
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	8a 31       	cpi	r24, 0x1A	; 26
 108:	21 f4       	brne	.+8      	; 0x112 <main+0x36>
				while(TCNT0 < dc_leftover);	// Finish Duty Cycle Remainder
 10a:	86 b5       	in	r24, 0x26	; 38
 10c:	8c 38       	cpi	r24, 0x8C	; 140
 10e:	e8 f3       	brcs	.-6      	; 0x10a <main+0x2e>
				PORTB = 0x00;				// Then set Output LED PB2 to 'LOW'
 110:	15 b8       	out	0x05, r1	; 5
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to CTC (Cont.), Prescaler '1024'
	
	while (1) {
		PORTB |= LED;						// Set Output LED PB2 to 'HIGH'
		i = 0;								// Initialize Counter 'i' to zero
		while (i < p_end) {					// Loop Counter 'i' until Period Quotient is met
 112:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 116:	8c 32       	cpi	r24, 0x2C	; 44
 118:	a0 f3       	brcs	.-24     	; 0x102 <main+0x26>
			if (i == dc_end) {				// If Counter 'i' is at end of Duty Cycle Quotient...
				while(TCNT0 < dc_leftover);	// Finish Duty Cycle Remainder
				PORTB = 0x00;				// Then set Output LED PB2 to 'LOW'
			}
		}
		while (TCNT0 < p_leftover);			// If Counter 'i' at end of period, then finish remainder
 11a:	86 b5       	in	r24, 0x26	; 38
 11c:	8f 33       	cpi	r24, 0x3F	; 63
 11e:	e8 f3       	brcs	.-6      	; 0x11a <main+0x3e>
		TCNT0 = 0x00;						// Restart Period and Timer0 from beginning
 120:	16 bc       	out	0x26, r1	; 38
	}
 122:	eb cf       	rjmp	.-42     	; 0xfa <main+0x1e>

00000124 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	i++;							// Increment Counter 'i'
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	return;							// Resume code from where interrupt left off
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
