
DA2C_T2_Normal_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000998  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e2  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  0000145e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001700  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000467  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <main>:
	
	unsigned char d_end = delay/256;		// Quotient of Delay divided by Counter Size
	unsigned char d_leftover = delay%256;	// Remainder of Delay divided by Counter Size
	unsigned char i = 0;					// 8-bit Positive Counter 'i'
	
	DDRB = LED;											// Set PB2 as an Output
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~SWITCH;									// Set PC2 as an Input
  d0:	3a 98       	cbi	0x07, 2	; 7
	TCCR0A = (0<<WGM01)|(0<<WGM00);						// Set WGM to Normal
  d2:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to Normal (Cont.), Prescaler '1024'
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	85 bd       	out	0x25, r24	; 37
			PORTB |= LED;					// Set Output LED PB2 to 'High'
			i = 0;							// Initialize Counter 'i' to zero
			while (i < d_end) {				// Loop Counter 'i' until Delay Quotient is met
				while((TIFR0 & 0x01) == 0);	// Check if Timer0 Overflow Set
				TCNT0 = 0x00;				// If Overflow set, Restart Timer0
				TIFR0 = 0x01;				// And Reset Overflow Flag
  d8:	91 e0       	ldi	r25, 0x01	; 1
	DDRC &= ~SWITCH;									// Set PC2 as an Input
	TCCR0A = (0<<WGM01)|(0<<WGM00);						// Set WGM to Normal
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);	// Set WGM to Normal (Cont.), Prescaler '1024'
	
	while (1) {
		PORTB &= ~LED;						// Set Output LED PB2 to 'Low'
  da:	2a 98       	cbi	0x05, 2	; 5
		PORTC |= SWITCH;					// Activate Pull-up on PC2 (resistor connected to VCC)
  dc:	42 9a       	sbi	0x08, 2	; 8
		if ((~PINC & SWITCH) == SWITCH){	// If SWITCH 'High' Turn LED 'ON' for 1250ms
  de:	32 99       	sbic	0x06, 2	; 6
  e0:	fc cf       	rjmp	.-8      	; 0xda <main+0xe>
			PORTB |= LED;					// Set Output LED PB2 to 'High'
  e2:	2a 9a       	sbi	0x05, 2	; 5
  e4:	8c e4       	ldi	r24, 0x4C	; 76
			i = 0;							// Initialize Counter 'i' to zero
			while (i < d_end) {				// Loop Counter 'i' until Delay Quotient is met
				while((TIFR0 & 0x01) == 0);	// Check if Timer0 Overflow Set
  e6:	a8 9b       	sbis	0x15, 0	; 21
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <main+0x1a>
				TCNT0 = 0x00;				// If Overflow set, Restart Timer0
  ea:	16 bc       	out	0x26, r1	; 38
				TIFR0 = 0x01;				// And Reset Overflow Flag
  ec:	95 bb       	out	0x15, r25	; 21
  ee:	81 50       	subi	r24, 0x01	; 1
		PORTB &= ~LED;						// Set Output LED PB2 to 'Low'
		PORTC |= SWITCH;					// Activate Pull-up on PC2 (resistor connected to VCC)
		if ((~PINC & SWITCH) == SWITCH){	// If SWITCH 'High' Turn LED 'ON' for 1250ms
			PORTB |= LED;					// Set Output LED PB2 to 'High'
			i = 0;							// Initialize Counter 'i' to zero
			while (i < d_end) {				// Loop Counter 'i' until Delay Quotient is met
  f0:	d1 f7       	brne	.-12     	; 0xe6 <main+0x1a>
				while((TIFR0 & 0x01) == 0);	// Check if Timer0 Overflow Set
				TCNT0 = 0x00;				// If Overflow set, Restart Timer0
				TIFR0 = 0x01;				// And Reset Overflow Flag
				i++;						// Increment Counter 'i'
			}
			while (TCNT0 < d_leftover);		// If Counter 'i' at end of delay, then finish remainder
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	8a 34       	cpi	r24, 0x4A	; 74
  f6:	e8 f3       	brcs	.-6      	; 0xf2 <main+0x26>
			TCNT0 = 0x00;					// Restart Period and Timer0 from beginning
  f8:	16 bc       	out	0x26, r1	; 38
  fa:	ef cf       	rjmp	.-34     	; 0xda <main+0xe>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
